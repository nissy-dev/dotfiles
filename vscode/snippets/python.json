{
  "bit all search": {
    "prefix": ["bit", "bit all search"],
    "body": [
      "n = 10",
      "for bit in range(1 << n):",
      "\tpattern = []",
      "\tfor item in range(n):",
      "\t\t# 2進数表記で共通部分だけを取り出す",
      "\t\tif bit & (1 << item):",
      "\t\t\tpattern.append(item)",
      "\tprint(pattern)"
    ]
  },
  "combination": {
    "prefix": ["cmb", "combination"],
    "body": [
      "from operator import mul",
      "from functools import reduce",
      "",
      "def cmb(n, r):",
      "\tr = min(n - r, r)",
      "\tif r == 0:",
      "\t\treturn 1",
      "\tover = reduce(mul, range(n, n - r, -1))",
      "\tunder = reduce(mul, range(1, r + 1))",
      "\treturn over // under"
    ]
  },
  "combinatoric iterators": {
    "prefix": ["cmb", "nCr", "nHr"],
    "body": [
      "import itertools",
      "",
      "for val in itertools.combinations(range(n), 2):",
      "# for val in itertools.combinations_with_replacement(range(n), 2):",
      "\tprint(val)"
    ]
  },
  "counter": {
    "prefix": ["counter", "cnt"],
    "body": [
      "import collections",
      "counter = collections.Counter(n)",
      "",
      "for key, val in counter.items():",
      "\tprint(key, val)"
    ]
  },
  "sorted by key": {
    "prefix": ["sorted"],
    "body": [
      "sorted(data, key=lambda x: x[2], reverse=True)"
    ]
  }
}
